{"version":3,"file":"component---src-templates-post-template-tsx-a17dabc066f544f5cd62.js","mappings":"2NAwBA,MAdiBA,IAA2C,IAA1C,MAAEC,EAAK,KAAEC,EAAI,KAAEC,GAAqB,EACpD,OACEC,EAAAA,EAAAA,IAACC,EAAS,MACRD,EAAAA,EAAAA,IAACE,EAAK,KAAEL,IACRG,EAAAA,EAAAA,IAACG,EAAI,KAAEL,IACPE,EAAAA,EAAAA,IAACI,EAAO,KACLL,EAAKM,KAAIC,IACRN,EAAAA,EAAAA,IAACO,EAAQ,CAACC,IAAKF,GAAMA,MAGf,EAMhB,MAAML,GAAS,0SAiBTC,GAAK,0OAYLC,GAAI,2EAGCM,EAAAA,EAAAA,KAAgB,KAGrBL,GAAO,+HAOPG,GAAQ,2GAIQE,EAAAA,EAAAA,YAAuB,UAClCA,EAAAA,EAAAA,KAAgB,wBC7D3B,MAJoBb,IAAiC,IAAhC,KAAEc,GAAwB,EAC7C,OAAOV,EAAAA,EAAAA,IAACW,EAAgB,CAACC,wBAAyB,CAAEC,OAAQH,IAAU,EAKxE,MAAMC,GAAgB,2cAkDOF,EAAAA,EAAAA,KAAgB,qBACrBA,EAAAA,EAAAA,UAAqB,8KA8BnBA,EAAAA,EAAAA,YAAuB,2BAMpCA,EAAAA,EAAAA,KAAgB,8BACIA,EAAAA,EAAAA,KAAgB,uMA2BvBA,EAAAA,EAAAA,YAAuB,2NAgBpCA,EAAAA,EAAAA,KAAgB,sCAELA,EAAAA,EAAAA,OAAkB,oHAQlBA,EAAAA,EAAAA,OAAkB,kHAO3BA,EAAAA,EAAAA,SAAoB,wHC/JnC,MAyCMK,GAAO,sFAKb,MAjCsB,KACpB,MAAMC,GAAUC,EAAAA,EAAAA,QAAuB,MAwBvC,OAtBAC,EAAAA,EAAAA,YAAU,KACR,GAAwB,OAApBF,EAAQG,QAAkB,OAE9B,MAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IAtBM,gCAuBNC,KAtBO,4BAuBP,aAAc,WACdC,MAAO,WACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQnC,IAAmB,IAAjBY,EAAKwB,GAAM,EAC9Cb,EAAWc,aAAazB,EAAKwB,EAAM,IAGrCjB,EAAQG,QAAQgB,YAAYf,EAAW,GACtC,KAEInB,EAAAA,EAAAA,IAACc,EAAO,CAACqB,IAAKpB,GAAW,ECelC,MArCqBnB,IAKI,IAJvBwC,MACEC,mBAAmB,MAAEC,IAEvBC,UAAU,KAAEC,IACM,EAClB,MACEC,MAAM,KACJ/B,EACAgC,aAAa,MACX7C,EAAK,QACL8C,EAAO,KACP7C,EACA8C,YAAY,KAAE7C,GACd8C,WAAW,UAAEC,MAGfR,EAAM,GAEV,OACEtC,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAAC+C,EAAAA,EAAQ,CACPlD,MAAOA,EACPmD,YAAaL,EACbM,IAAKT,EACLU,MAAOJ,IAEP9C,EAAAA,EAAAA,IAACC,EAAS,MACRD,EAAAA,EAAAA,IAACmD,EAAQ,CAACtD,MAAOA,EAAOC,KAAMA,EAAMC,KAAMA,KAC1CC,EAAAA,EAAAA,IAACoD,EAAW,CAAC1C,KAAMA,KACnBV,EAAAA,EAAAA,IAACqD,EAAa,QAGjB,EAMP,MAAMpD,GAAS,cAAAqD,OAAAA,YAAA,EAAAC,KAAAA,SAAAC,OAAAA,qL","sources":["webpack://gatsby-tech-blog/./src/components/post/PostHead.tsx","webpack://gatsby-tech-blog/./src/components/post/PostContent.tsx","webpack://gatsby-tech-blog/./src/components/post/CommentWidget.tsx","webpack://gatsby-tech-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport { LIGHT_COLOR } from 'utils/color';\n\ninterface PostHeadProps {\n  title: string;\n  date: string;\n  tags: string[];\n}\n\nconst PostHead = ({ title, date, tags }: PostHeadProps) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Date>{date}</Date>\n      <Wrapper>\n        {tags.map(tag => (\n          <Category key={tag}>{tag}</Category>\n        ))}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default PostHead;\n\nconst Container = styled.div`\n  width: 90%;\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 3rem;\n  padding: 5.5rem 0;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    width: 92%;\n    gap: 2.5rem;\n    padding: 4.5rem 0;\n  }\n`;\n\nconst Title = styled.h1`\n  font-weight: 700;\n  font-size: 3.7rem;\n  line-height: 4.5rem;\n  word-break: keep-all;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    font-size: 3.4rem;\n    text-align: center;\n  }\n`;\n\nconst Date = styled.h3`\n  font-weight: 400;\n  font-size: 1.7rem;\n  color: ${LIGHT_COLOR.gray};\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 1.3rem;\n`;\n\nconst Category = styled.div`\n  padding: 1rem 1.6rem;\n  font-weight: 500;\n  font-size: 1.4rem;\n  background-color: ${LIGHT_COLOR.opacityBlue};\n  color: ${LIGHT_COLOR.main};\n  border-radius: 2rem;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { LIGHT_COLOR } from 'utils/color';\n\ninterface PostContentProps {\n  html: string;\n}\n\nconst PostContent = ({ html }: PostContentProps) => {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default PostContent;\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 1.7rem;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 0.3rem 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 3rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      margin-top: 1rem;\n    }\n  }\n\n  h1 {\n    font-size: 3.2rem;\n  }\n\n  h2 {\n    font-size: 2.8rem;\n  }\n\n  h3 {\n    font-size: 2.4rem;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 3rem 0;\n    padding: 0.7rem 2.2rem;\n    border-left: 5px solid ${LIGHT_COLOR.main};\n    background-color: ${LIGHT_COLOR.lightBlue};\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 2rem;\n    padding: 0.3rem 0;\n  }\n\n  ol {\n    list-style: decimal;\n  }\n\n  ul {\n    li {\n      list-style-type: disc;\n\n      li {\n        list-style-type: circle;\n\n        li {\n          list-style-type: square;\n        }\n      }\n    }\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 0.4px solid ${LIGHT_COLOR.opacityBlue};\n    margin: 4rem 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: ${LIGHT_COLOR.main};\n    border-bottom: 0.5px solid ${LIGHT_COLOR.main};\n\n    &:hover {\n      border-bottom-width: 1px;\n    }\n  }\n\n  b,\n  strong {\n    font-weight: 600;\n  }\n\n  em {\n    margin-right: 0.2rem;\n  }\n\n  details {\n    padding-left: 0.5rem;\n    margin: 0.1rem 0;\n\n    & > div {\n      padding-left: 1.3rem;\n      margin: 1rem 0;\n    }\n  }\n\n  aside {\n    border: 1.3px solid ${LIGHT_COLOR.opacityGray};\n    border-radius: 0.4rem;\n    padding: 1.5rem 2rem;\n    margin-top: 1rem;\n  }\n\n  // Adjust Code Style\n  code[class*='language-'],\n  pre[class*='language-'] {\n    font-family: 'NotoSansMono';\n    tab-size: 2;\n  }\n\n  code[class*='language-'] {\n    padding: 0.2rem 0.6rem;\n    margin: 0 0.2rem;\n    color: ${LIGHT_COLOR.main};\n    font-size: 1.5rem;\n    background-color: ${LIGHT_COLOR.codeBg};\n    border-radius: 0.4rem;\n    word-break: keep-all;\n  }\n\n  pre[class*='language-'] {\n    margin: 3.7rem 0;\n    padding: 4rem;\n    background-color: ${LIGHT_COLOR.codeBg};\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      padding: 3rem;\n    }\n\n    code[class*='language-'] {\n      color: ${LIGHT_COLOR.deepGray};\n      background-color: transparent;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 0.3rem;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport React, { useRef, useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'dazzel3/dazzel3.github.io';\n\ninterface UtterancesAttributesType {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n}\n\nconst CommentWidget = () => {\n  const element = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (element.current === null) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'âœ¨Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    element.current.appendChild(utterances);\n  }, []);\n\n  return <Comment ref={element} />;\n};\n\nconst Comment = styled.div`\n  width: 100%;\n  margin: 3rem 0;\n`;\n\nexport default CommentWidget;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Template from 'components/common/Template';\nimport { PostContentType } from 'types/postItem';\nimport PostHead from 'components/post/PostHead';\nimport styled from '@emotion/styled';\nimport PostContent from 'components/post/PostContent';\nimport CommentWidget from 'components/post/CommentWidget';\ninterface PostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      edges: PostContentType[];\n    };\n  };\n  location: {\n    href: string;\n  };\n}\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: PostTemplateProps) => {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories: { tags },\n        thumbnail: { publicURL },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <>\n      <Template\n        title={title}\n        description={summary}\n        url={href}\n        image={publicURL}\n      >\n        <Container>\n          <PostHead title={title} date={date} tags={tags} />\n          <PostContent html={html} />\n          <CommentWidget />\n        </Container>\n      </Template>\n    </>\n  );\n};\n\nexport default PostTemplate;\n\nconst Container = styled.div`\n  width: 54%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    width: 90%;\n  }\n`;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories {\n              type\n              tags\n            }\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","title","date","tags","___EmotionJSX","Container","Title","Date","Wrapper","map","tag","Category","key","LIGHT_COLOR","html","MarkdownRenderer","dangerouslySetInnerHTML","__html","Comment","element","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","categories","thumbnail","publicURL","Template","description","url","image","PostHead","PostContent","CommentWidget","target","name","styles"],"sourceRoot":""}