{"version":3,"file":"component---src-templates-post-template-tsx-f43e940c38409c2d026b.js","mappings":"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","sources":["webpack://gatsby-tech-blog/./src/components/post/PostHead.tsx","webpack://gatsby-tech-blog/./src/components/post/PostContent.tsx","webpack://gatsby-tech-blog/./src/components/post/CommentWidget.tsx","webpack://gatsby-tech-blog/./src/templates/post_template.tsx"],"sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostHeadProps {\n  title: string;\n  date: string;\n  tags: string[];\n}\n\nconst PostHead = ({ title, date, tags }: PostHeadProps) => {\n  return (\n    <Container>\n      <Title>{title}</Title>\n      <Date>{date}</Date>\n      <Wrapper>\n        {tags.map(tag => (\n          <Category key={tag}>{tag}</Category>\n        ))}\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default PostHead;\n\nconst Container = styled.div`\n  width: 90%;\n  height: fit-content;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 3rem;\n  padding: 5.5rem 0;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    width: 92%;\n    gap: 2rem;\n    padding: 4rem 0;\n  }\n`;\n\nconst Title = styled.h1`\n  font-weight: 700;\n  font-size: 3.7rem;\n  line-height: 4.5rem;\n  word-break: keep-all;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    font-size: 3.4rem;\n    text-align: center;\n    font-size: 2.7rem;\n    line-height: 3.6rem;\n  }\n`;\n\nconst Date = styled.h3`\n  font-weight: 400;\n  font-size: 1.7rem;\n  color: ${({ theme }) => theme.colors.gray};\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    font-size: 1.5rem;\n  }\n`;\n\nconst Wrapper = styled.div``;\n\nconst Category = styled.div`\n  float: left;\n  padding: 1rem 1.6rem;\n  margin-right: 1rem;\n  margin-bottom: 1rem;\n  font-weight: 500;\n  font-size: 1.4rem;\n  word-break: keep-all;\n  background-color: ${({ theme }) => theme.colors.opacityBlue};\n  color: ${({ theme }) => theme.colors.main};\n  border-radius: 2rem;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    font-size: 1.2rem;\n    padding: 0.8rem 1.4rem;\n    margin-right: 0.8rem;\n    margin-bottom: 0.8rem;\n  }\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostContentProps {\n  html: string;\n}\n\nconst PostContent = ({ html }: PostContentProps) => {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default PostContent;\n\nconst MarkdownRenderer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 0 auto;\n  line-height: 1.8;\n  font-size: 1.7rem;\n  font-weight: 400;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    line-height: 1.7;\n    font-size: 1.6rem;\n  }\n\n  p {\n    padding: 0.3rem 0;\n  }\n\n  h1,\n  h2,\n  h3 {\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 3rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      margin-top: 1rem;\n    }\n  }\n\n  h1 {\n    font-size: 3.2rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      font-size: 2.4rem;\n    }\n  }\n\n  h2 {\n    font-size: 2.8rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      font-size: 2.2rem;\n    }\n  }\n\n  h3 {\n    font-size: 2.4rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      font-size: 1.9rem;\n    }\n  }\n\n  blockquote {\n    margin: 3rem 0;\n    padding: 0.7rem 2.2rem;\n    border-left: 5px solid ${({ theme }) => theme.colors.main};\n    background-color: ${({ theme }) => theme.colors.lightBlue};\n  }\n\n  ol,\n  ul {\n    margin-left: 1.7rem;\n    padding: 0.2rem 0;\n  }\n\n  ol {\n    list-style: decimal;\n  }\n\n  ul {\n    li {\n      list-style-type: disc;\n\n      li {\n        list-style-type: circle;\n\n        li {\n          list-style-type: square;\n        }\n      }\n    }\n  }\n\n  hr {\n    border: 0.4px solid ${({ theme }) => theme.colors.opacityBlue};\n    margin: 4rem 0;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      margin: 2.5rem 0;\n    }\n  }\n\n  a {\n    color: ${({ theme }) => theme.colors.main};\n    border-bottom: 0.5px solid ${({ theme }) => theme.colors.main};\n\n    &:hover {\n      border-bottom-width: 1px;\n    }\n  }\n\n  b,\n  strong {\n    font-weight: 600;\n  }\n\n  em {\n    margin-right: 0.2rem;\n  }\n\n  details {\n    padding-left: 0.5rem;\n    margin: 0.1rem 0;\n\n    & > div {\n      padding-left: 1.3rem;\n      margin: 1rem 0;\n    }\n  }\n\n  aside {\n    border: 1.3px solid ${({ theme }) => theme.colors.opacityGray};\n    border-radius: 0.4rem;\n    padding: 1.5rem 2rem;\n    margin-top: 1rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      padding: 1.2rem 1.8rem;\n      margin-top: 0.5rem;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    font-family: 'NotoSansMono';\n    tab-size: 2;\n  }\n\n  code[class*='language-'] {\n    padding: 0.2rem 0.6rem;\n    margin: 0 0.1rem;\n    color: ${({ theme }) => theme.colors.main};\n    background-color: ${({ theme }) => theme.colors.codeBg};\n    font-size: 1.5rem;\n    border-radius: 0.4rem;\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      font-size: 1.4rem;\n      padding: 0.1rem 0.5rem;\n    }\n  }\n\n  pre[class*='language-'] {\n    margin: 3rem 0;\n    padding: 4rem;\n    background-color: ${({ theme }) => theme.colors.codeBg};\n\n    @media screen and (max-width: 767px) and (orientation: portrait) {\n      padding: 2rem;\n      margin: 2rem 0;\n    }\n\n    code[class*='language-'] {\n      color: ${({ theme }) => theme.colors.deepGray};\n      background-color: transparent;\n    }\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 0.3rem;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\nimport React, { useRef, useEffect } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst repo = 'dazzel3/dazzel3.github.io';\n\ninterface UtterancesAttributesType {\n  src: string;\n  repo: string;\n  'issue-term': string;\n  label: string;\n  theme: string;\n  crossorigin: string;\n  async: string;\n}\n\nconst CommentWidget = () => {\n  const element = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (element.current === null) return;\n\n    const utterances: HTMLScriptElement = document.createElement('script');\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'âœ¨Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    };\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value);\n    });\n\n    element.current.appendChild(utterances);\n  }, []);\n\n  return <Comment ref={element} />;\n};\n\nconst Comment = styled.div`\n  width: 100%;\n  margin: 3rem 0;\n`;\n\nexport default CommentWidget;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Template from 'components/common/Template';\nimport { PostContentType } from 'types/postItem';\nimport PostHead from 'components/post/PostHead';\nimport styled from '@emotion/styled';\nimport PostContent from 'components/post/PostContent';\nimport CommentWidget from 'components/post/CommentWidget';\ninterface PostTemplateProps {\n  data: {\n    allMarkdownRemark: {\n      edges: PostContentType[];\n    };\n  };\n  location: {\n    href: string;\n  };\n}\n\nconst PostTemplate = ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}: PostTemplateProps) => {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories: { tags },\n        thumbnail: { publicURL },\n      },\n    },\n  } = edges[0];\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <Container>\n        <PostHead title={title} date={date} tags={tags} />\n        <PostContent html={html} />\n        <CommentWidget />\n      </Container>\n    </Template>\n  );\n};\n\nexport default PostTemplate;\n\nconst Container = styled.div`\n  width: 54%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (max-width: 767px) and (orientation: portrait) {\n    width: 90%;\n  }\n`;\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories {\n              type\n              tags\n            }\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["_ref","title","date","tags","___EmotionJSX","Container","Title","Date","Wrapper","map","tag","Category","key","_styled","target","name","styles","_ref2","theme","colors","gray","_ref3","opacityBlue","_ref4","main","html","MarkdownRenderer","dangerouslySetInnerHTML","__html","lightBlue","_ref5","_ref6","_ref7","opacityGray","_ref8","_ref9","codeBg","_ref0","_ref1","deepGray","Comment","CommentWidget","element","useRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","categories","thumbnail","publicURL","Template","description","url","image","PostHead","PostContent"],"sourceRoot":""}